# LIA 개발 베스트 프랙티스

## 🎯 18세 서현 페르소나 개발 원칙

### 1. UI/UX 원칙
- **친근하고 캐주얼한 톤**: 반말, 이모지, 줄임말 사용
- **직관적인 인터페이스**: 복잡한 설정보다는 간단한 선택지
- **즉각적인 피드백**: 로딩 상태, 성공/실패 메시지 명확히 표시
- **모바일 우선**: 터치 친화적 크기와 간격

### 2. 색상 사용 원칙
```dart
// 주요 액션: 핑크 그라데이션
PrimaryButton(
  onPressed: () => action(),
  text: '메시지 ㄱㄱ',
)

// 보조 액션: 연한 회색
SecondaryButton(
  onPressed: () => cancel(),
  text: '아니야',
)

// 성공: 그린
Container(
  color: AppColors.green.withOpacity(0.1),
  child: Text('성공!', style: AppTextStyles.success),
)
```

### 3. 텍스트 스타일 원칙
- **제목**: AppTextStyles.h1, h2 사용
- **본문**: AppTextStyles.body 사용
- **버튼**: 서현이 말투 ("메시지 ㄱㄱ", "아니야")
- **도움말**: AppTextStyles.helper 사용

## 🏗️ 아키텍처 원칙

### 1. 파일 구조
```
lib/
├── core/                    # 핵심 설정
│   ├── app_colors.dart     # 색상 정의
│   └── app_text_styles.dart # 텍스트 스타일
├── presentation/           # UI 레이어
│   ├── screens/           # 화면들
│   └── widgets/           # 재사용 위젯
│       ├── common/        # 공통 위젯
│       └── specific/      # 특수 위젯
└── utils/                 # 유틸리티
```

### 2. Import 순서
```dart
// 1. Flutter 패키지
import 'package:flutter/material.dart';

// 2. 외부 패키지
import 'package:provider/provider.dart';

// 3. 내부 패키지
import 'package:lia/core/app_colors.dart';
import 'package:lia/presentation/widgets/lia_widgets.dart';
```

### 3. 위젯 구성 원칙
```dart
class ExampleWidget extends StatelessWidget {
  // 1. 필수 파라미터
  final String text;
  final VoidCallback onPressed;
  
  // 2. 선택적 파라미터
  final Color? color;
  final double? width;
  
  const ExampleWidget({
    Key? key,
    required this.text,
    required this.onPressed,
    this.color,
    this.width,
  }) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    return Container(
      // 구현...
    );
  }
}
```

## 🎨 UI 컴포넌트 사용 가이드

### 1. 버튼 사용법
```dart
// 주요 액션 - 항상 오른쪽이나 아래쪽에 배치
PrimaryButton(
  onPressed: () => performMainAction(),
  text: '메시지 ㄱㄱ',
)

// 보조 액션 - 왼쪽이나 위쪽에 배치
SecondaryButton(
  onPressed: () => Navigator.pop(context),
  text: '아니야',
)

// 버튼 조합 - 2:1 비율 권장
Row(
  children: [
    Expanded(
      child: SecondaryButton(
        onPressed: () => cancel(),
        text: '취소',
      ),
    ),
    SizedBox(width: 12),
    Expanded(
      flex: 2, // 주요 액션이 더 크게
      child: PrimaryButton(
        onPressed: () => confirm(),
        text: '확인',
      ),
    ),
  ],
)
```

### 2. 입력 필드 사용법
```dart
// 플로팅 라벨 - 서현이 말투로 질문
FloatingLabelTextField(
  label: '내 이름이 뭐야?',
  controller: nameController,
  onChanged: (value) {
    // 실시간 검증
    setState(() {
      isValid = value.isNotEmpty;
    });
  },
)
```

### 3. 차트 사용법
```dart
// 호감도 표시
GaugeChart() // 기본 75%

// 분포 표시
DonutChart() // 카테고리별 분포

// 비교 표시
BarChart() // 시간별 비교
```

## 📱 반응형 디자인 원칙

### 1. 화면 크기 대응
```dart
class ResponsiveWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        if (constraints.maxWidth > 600) {
          return DesktopLayout();
        } else {
          return MobileLayout();
        }
      },
    );
  }
}
```

### 2. 동적 크기 조정
```dart
// 화면 크기에 따른 차트 크기 조정
Widget build(BuildContext context) {
  return LayoutBuilder(
    builder: (context, constraints) {
      final chartSize = constraints.maxWidth.clamp(200.0, 300.0);
      return GaugeChart(size: chartSize);
    },
  );
}
```

## 🔄 상태 관리 원칙

### 1. StatefulWidget 사용
```dart
class MessageGenerationScreen extends StatefulWidget {
  @override
  _MessageGenerationScreenState createState() => _MessageGenerationScreenState();
}

class _MessageGenerationScreenState extends State<MessageGenerationScreen> {
  bool isLoading = false;
  String? errorMessage;
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: isLoading 
        ? GeneratingProgress()
        : MessageForm(),
    );
  }
}
```

### 2. 로딩 상태 관리
```dart
Future<void> generateMessage() async {
  setState(() {
    isLoading = true;
    errorMessage = null;
  });
  
  try {
    final result = await aiService.generateMessage();
    // 성공 처리
  } catch (e) {
    setState(() {
      errorMessage = '메시지 생성에 실패했어요';
    });
  } finally {
    setState(() {
      isLoading = false;
    });
  }
}
```

## 🎯 사용자 경험 원칙

### 1. 피드백 제공
```dart
// 즉각적인 피드백
ScaffoldMessenger.of(context).showSnackBar(
  SnackBar(
    content: Text('메시지 복사 완료! 이제 붙여넣기해서 써봐 ㄱㄱ'),
    backgroundColor: AppColors.green,
  ),
);
```

### 2. 로딩 상태 표시
```dart
// 로딩 시간에 따른 적절한 피드백
Widget buildLoadingWidget() {
  if (loadingTime < 2) {
    return PulsatingDot();
  } else if (loadingTime < 5) {
    return HeartSpinner();
  } else {
    return GeneratingProgress();
  }
}
```

### 3. 오류 처리
```dart
// 친근한 오류 메시지
Widget buildErrorWidget(String error) {
  return Container(
    padding: EdgeInsets.all(16),
    decoration: BoxDecoration(
      color: AppColors.error.withOpacity(0.1),
      borderRadius: BorderRadius.circular(8),
    ),
    child: Column(
      children: [
        Text(
          '앗, 뭔가 잘못됐어!',
          style: AppTextStyles.error,
        ),
        SizedBox(height: 8),
        Text(
          error,
          style: AppTextStyles.body,
        ),
        SizedBox(height: 16),
        PrimaryButton(
          onPressed: () => retry(),
          text: '다시 시도',
        ),
      ],
    ),
  );
}
```

## 🔧 성능 최적화 원칙

### 1. 위젯 최적화
```dart
// const 생성자 사용
const SizedBox(height: 16);

// 빌드 메서드 최적화
@override
Widget build(BuildContext context) {
  return Column(
    children: [
      _buildHeader(), // 별도 메서드로 분리
      _buildContent(),
      _buildFooter(),
    ],
  );
}
```

### 2. 메모리 관리
```dart
class _MyWidgetState extends State<MyWidget> {
  late TextEditingController _controller;
  
  @override
  void initState() {
    super.initState();
    _controller = TextEditingController();
  }
  
  @override
  void dispose() {
    _controller.dispose(); // 리소스 해제
    super.dispose();
  }
}
```

## 🎨 접근성 원칙

### 1. 색상 대비
```dart
// 충분한 색상 대비 확보
Text(
  '중요한 정보',
  style: TextStyle(
    color: AppColors.charcoal, // 어두운 색상
    backgroundColor: AppColors.background, // 밝은 배경
  ),
)
```

### 2. 터치 영역
```dart
// 최소 44px 터치 영역 확보
Container(
  height: 44,
  child: PrimaryButton(
    onPressed: () => action(),
    text: '버튼',
  ),
)
```

## 🧪 테스트 원칙

### 1. 위젯 테스트
```dart
testWidgets('PrimaryButton should show text', (WidgetTester tester) async {
  await tester.pumpWidget(
    MaterialApp(
      home: PrimaryButton(
        onPressed: () {},
        text: '메시지 ㄱㄱ',
      ),
    ),
  );
  
  expect(find.text('메시지 ㄱㄱ'), findsOneWidget);
});
```

### 2. 통합 테스트
```dart
// 사용자 플로우 테스트
testWidgets('Message generation flow', (WidgetTester tester) async {
  // 1. 상황 입력
  await tester.enterText(find.byType(FloatingLabelTextField), '데이트 신청');
  
  // 2. 생성 버튼 클릭
  await tester.tap(find.text('메시지 ㄱㄱ'));
  await tester.pumpAndSettle();
  
  // 3. 결과 확인
  expect(find.byType(GeneratingProgress), findsOneWidget);
});
```

## 💡 서현 페르소나 체크리스트

### UI 요소 체크
- [ ] 버튼 텍스트가 서현이 말투인가? ("메시지 ㄱㄱ", "아니야")
- [ ] 색상이 18세 여성에게 어필하는가? (핑크, 퍼플 톤)
- [ ] 폰트가 친근하고 귀여운가? (Gaegu 폰트)
- [ ] 터치 영역이 충분한가? (최소 44px)

### UX 플로우 체크
- [ ] 3번의 탭으로 원하는 기능에 도달 가능한가?
- [ ] 로딩 시간이 5초 이상일 때 진행률을 보여주는가?
- [ ] 오류 발생 시 친근한 메시지를 보여주는가?
- [ ] 성공 시 즉각적인 피드백을 제공하는가?

### 성능 체크
- [ ] 화면 전환이 60fps로 부드러운가?
- [ ] 메모리 사용량이 적절한가?
- [ ] 네트워크 오류 시 적절히 처리되는가?
- [ ] 오프라인 상태에서도 기본 기능이 작동하는가?
 