# Flutter 리팩토링 가이드: 단일 파일 → 다중 파일 구조

## 🎯 목표 (Goal)
단일 `main.dart` 파일로 작성된 Flutter 앱을 유지보수와 재사용성이 용이한 체계적인 다중 파일 구조로 리팩토링합니다.

## 📁 목표 파일 구조 (Target Structure)

```
lib/
├── main.dart                    # 앱의 시작점
│
├── core/                        # 핵심 디자인 시스템
│   ├── app_colors.dart         # 색상 정의
│   └── app_text_styles.dart    # 텍스트 스타일 정의
│
├── presentation/                # UI 관련 모든 것
│   ├── screens/                 #   - 전체 화면
│   │   └── design_guide_screen.dart # 메인 화면
│   │
│   └── widgets/                 #   - 재사용 위젯
│       ├── common/              #     - 범용 위젯
│       │   ├── component_card.dart
│       │   ├── dashed_divider.dart
│       │   ├── primary_button.dart
│       │   └── secondary_button.dart
│       │
│       └── specific/            #     - 특정 기능 위젯
│           ├── charts/
│           │   ├── gauge_chart.dart
│           │   ├── donut_chart.dart
│           │   └── bar_chart.dart
│           │
│           ├── forms/
│           │   ├── floating_label_textfield.dart
│           │   ├── tag_input_field.dart
│           │   ├── custom_toggle_switch.dart
│           │   └── custom_slider.dart
│           │
│           ├── feedback/
│           │   ├── heart_spinner.dart
│           │   ├── pulsating_dot.dart
│           │   ├── skeleton_ui.dart
│           │   └── generating_progress.dart
│           │
│           └── navigation/
│               └── bottom_navigation_bar.dart
│
└── utils/                       # 유틸리티 함수
    └── custom_modal.dart        # 커스텀 모달 함수
```

## 🔄 수행 절차 (Step-by-Step Instructions)

### 1. 파일 생성 및 코드 이동

#### Core 시스템 분리
```dart
// lib/core/app_colors.dart
/// 앱의 핵심 색상을 정의하는 클래스입니다.
///
/// 이 클래스를 통해 앱 전체의 색상 테마를 일관되게 관리할 수 있습니다.
/// 모든 색상은 static const로 정의되어 메모리 효율성을 보장합니다.
class AppColors {
  // AppColors 클래스 전체 내용 이동
}
```

```dart
// lib/core/app_text_styles.dart
/// 앱의 텍스트 스타일을 정의하는 클래스입니다.
///
/// 이 클래스를 통해 앱 전체의 타이포그래피를 일관되게 관리할 수 있습니다.
/// 모든 스타일은 static const로 정의되어 메모리 효율성을 보장합니다.
class AppTextStyles {
  // AppTextStyles 클래스 전체 내용 이동
}
```

#### 공통 위젯 분리 (common/)
```dart
// lib/presentation/widgets/common/primary_button.dart
import 'package:flutter/material.dart';
import '../../../core/app_colors.dart';

/// 앱의 주요 액션을 위한 프라이머리 버튼입니다.
///
/// 그라데이션 배경과 그림자 효과가 특징이며,
/// 앱의 가장 중요한 긍정적 액션에 사용됩니다.
///
/// [text] 버튼에 표시될 텍스트입니다.
/// [onPressed] 버튼을 눌렀을 때 실행될 콜백 함수입니다.
/// [icon] 선택적으로 표시할 아이콘입니다.
class PrimaryButton extends StatelessWidget {
  // PrimaryButton 위젯 구현
}
```

#### 특화 위젯 분리 (specific/)
```dart
// lib/presentation/widgets/specific/charts/gauge_chart.dart
import 'package:flutter/material.dart';
import '../../../../core/app_colors.dart';

/// 게이지 형태의 차트를 표시하는 위젯입니다.
///
/// 진행률이나 비율을 시각적으로 표현하는 데 사용되며,
/// 애니메이션 효과와 그라데이션으로 매력적인 UI를 제공합니다.
///
/// [value] 0.0부터 1.0까지의 진행률 값입니다.
/// [title] 차트 상단에 표시될 제목입니다.
/// [subtitle] 차트 하단에 표시될 부제목입니다.
class GaugeChart extends StatefulWidget {
  // _GaugeChart → GaugeChart로 이름 변경 (공개)
  // 위젯 구현
}
```

### 2. 의존성 해결 (Import 추가)

#### Import 패턴 예시
```dart
// 상대 경로 import 사용
import '../../../core/app_colors.dart';           // 3단계 상위
import '../../common/primary_button.dart';        // 2단계 상위
import '../forms/floating_label_textfield.dart';  // 1단계 상위

// Flutter 패키지 import
import 'package:flutter/material.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';
```

#### 화면 파일의 Import 예시
```dart
// lib/presentation/screens/design_guide_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';

// Core imports
import '../../core/app_colors.dart';
import '../../core/app_text_styles.dart';

// Common widget imports
import '../widgets/common/component_card.dart';
import '../widgets/common/primary_button.dart';
import '../widgets/common/secondary_button.dart';

// Specific widget imports
import '../widgets/specific/charts/gauge_chart.dart';
import '../widgets/specific/charts/donut_chart.dart';
import '../widgets/specific/charts/bar_chart.dart';
import '../widgets/specific/forms/floating_label_textfield.dart';
import '../widgets/specific/forms/tag_input_field.dart';
import '../widgets/specific/feedback/heart_spinner.dart';
import '../widgets/specific/feedback/generating_progress.dart';

// Utils imports
import '../../utils/custom_modal.dart';
```

### 3. 문서 주석 (Dartdoc) 작성 규칙

#### 클래스 주석 템플릿
```dart
/// [클래스명]의 간단한 설명입니다.
///
/// 더 자세한 설명과 사용 목적을 여기에 작성합니다.
/// 여러 줄에 걸쳐 상세한 정보를 제공할 수 있습니다.
///
/// 사용 예시:
/// ```dart
/// Widget myWidget = MyWidget(
///   parameter1: 'value1',
///   parameter2: 42,
/// );
/// ```
///
/// 참고사항:
/// - 특별한 사용법이나 주의사항
/// - 관련된 다른 클래스나 위젯과의 관계
class MyWidget extends StatelessWidget {
  /// [parameter1]에 대한 설명입니다.
  final String parameter1;
  
  /// [parameter2]에 대한 설명입니다.
  final int parameter2;
  
  /// [MyWidget]의 생성자입니다.
  ///
  /// [parameter1]은 필수 매개변수이며, [parameter2]는 선택적입니다.
  const MyWidget({
    super.key,
    required this.parameter1,
    this.parameter2 = 0,
  });
}
```

#### 메서드 주석 템플릿
```dart
/// 메서드의 기능을 설명합니다.
///
/// [parameter] 매개변수에 대한 설명입니다.
/// 
/// 반환값에 대한 설명을 포함합니다.
/// 
/// 예외가 발생할 수 있는 경우 그에 대한 설명도 추가합니다.
ReturnType methodName(ParameterType parameter) {
  // 메서드 구현
}
```

### 4. 최종 main.dart 정리

```dart
// lib/main.dart
import 'package:flutter/material.dart';
import 'presentation/screens/design_guide_screen.dart';

/// LIA Design Guide 앱의 진입점입니다.
void main() {
  runApp(const LiaDesignGuideApp());
}

/// LIA Design Guide 앱의 루트 위젯입니다.
///
/// 앱의 기본 테마와 홈 화면을 설정합니다.
class LiaDesignGuideApp extends StatelessWidget {
  const LiaDesignGuideApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'LIA Design Guide',
      theme: ThemeData(
        useMaterial3: true,
      ),
      home: const DesignGuideScreen(),
    );
  }
}
```

## 🎯 리팩토링 체크리스트

### 파일 분리 완료 체크
- [ ] `core/` - 디자인 시스템 (색상, 텍스트 스타일)
- [ ] `presentation/screens/` - 화면 위젯
- [ ] `presentation/widgets/common/` - 범용 위젯
- [ ] `presentation/widgets/specific/` - 특화 위젯
- [ ] `utils/` - 유틸리티 함수

### 코드 품질 체크
- [ ] 모든 private 위젯(`_`)을 public으로 변경
- [ ] 모든 import 구문이 정확히 추가됨
- [ ] 빌드 에러가 없음
- [ ] 모든 클래스에 Dartdoc 주석 추가
- [ ] 모든 public 메서드에 주석 추가

### 네이밍 컨벤션 체크
- [ ] 파일명은 snake_case 사용
- [ ] 클래스명은 PascalCase 사용
- [ ] 변수명과 메서드명은 camelCase 사용
- [ ] private 멤버는 underscore(_) 접두사 사용

## 🚀 결과물 형식 (Output Format)

각 파일의 전체 코드를 다음 형식으로 제출:

```dart
// File: lib/core/app_colors.dart

import 'package:flutter/material.dart';

/// 앱의 핵심 색상을 정의하는 클래스입니다.
class AppColors {
  // 전체 구현 코드
}
```

## 💡 추가 고려사항

### 성능 최적화
- `const` 생성자 사용 권장
- `static const` 상수 정의 활용
- 불필요한 rebuild 방지

### 확장성 고려
- 새로운 위젯 추가 시 적절한 디렉토리 선택
- 공통 기능은 `common/`에, 특화 기능은 `specific/`에 배치
- 관련 위젯들은 하위 디렉토리로 그룹화

### 유지보수성
- 명확한 파일명과 클래스명 사용
- 의존성 최소화
- 단일 책임 원칙 준수

---

**핵심 원칙**: 각 파일은 하나의 명확한 책임을 가져야 하며, 다른 개발자가 쉽게 이해하고 사용할 수 있도록 충분한 문서화가 필요합니다.
description:
globs:
alwaysApply: false
---
 